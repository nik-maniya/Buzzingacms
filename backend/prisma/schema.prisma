generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  password    String
  name        String
  role        Role         @default(VIEWER)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  collections Collection[]
  forms       Form[]
  menus       Menu[]
  pages       Page[]

  @@map("users")
}

model Page {
  id          String     @id @default(uuid())
  title       String
  slug        String
  content     Json?
  status      PageStatus @default(DRAFT)
  description String?
  keywords    String[]
  ogImage     String?
  isHomePage  Boolean    @default(false)
  authorId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  customCss   String?
  customJs    String?
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([authorId, slug])
  @@index([slug])
  @@index([authorId])
  @@index([status])
  @@map("pages")
}

model Collection {
  id          String           @id @default(uuid())
  name        String
  slug        String           @unique
  description String?
  fields      Json
  authorId    String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  items       CollectionItem[]
  author      User             @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([slug])
  @@index([authorId])
  @@map("collections")
}

model CollectionItem {
  id           String     @id @default(uuid())
  collectionId String
  data         Json
  status       String     @default("draft")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@index([collectionId])
  @@map("collection_items")
}

model Media {
  id           String   @id @default(uuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  url          String
  alt          String?
  caption      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([mimeType])
  @@map("media")
}

model Menu {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  location  String?
  items     Json
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([slug])
  @@index([authorId])
  @@map("menus")
}

model Form {
  id          String         @id @default(uuid())
  name        String
  slug        String         @unique
  description String?
  fields      Json
  settings    Json?
  authorId    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  responses   FormResponse[]
  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([slug])
  @@index([authorId])
  @@map("forms")
}

model FormResponse {
  id        String   @id @default(uuid())
  formId    String
  data      Json
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@index([formId])
  @@index([createdAt])
  @@map("form_responses")
}

model Redirect {
  id          String   @id @default(uuid())
  fromPath    String   @unique
  toPath      String
  statusCode  Int      @default(301)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([fromPath])
  @@map("redirects")
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

enum PageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
